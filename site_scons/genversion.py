#
# LSST Data Management System
# Copyright 2015 AURA/LSST.
#
# This product includes software developed by the
# LSST Project (http://www.lsst.org/).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the LSST License Statement and
# the GNU General Public License along with this program.  If not,
# see <http://www.lsstcorp.org/LegalNotices/>.
#
# genversion.py : declare a builder for global version headers.

import shlex
from subprocess import Popen, PIPE

# For Builder actions, Scons wants args=(target, source, env)
# target: headerFile
# source: Nothing.


def buildVersionHeader(target, source, env):
    """Construct a version header from git-describe output and store
    it in the first file target named by str(target[0]) or
    str(target), when str(target).endswith(".h")"""
    # Look for tags that look like versions (number.number) that can
    # have other junk around.
    # Matches 2015_03.0 and v0.2.3, but not tickets/DM-1234
    showVersion = "git describe --tags --match '*[0-9].[0-9]*' --long --dirty"
    showCommit = "git rev-parse HEAD"
    versionStr = "unknown"
    commitStr = "xxxUnknownCommitxxx"
    try:
        p = Popen(shlex.split(showVersion), stdout=PIPE).communicate()
        versionStr = p[0].strip()
        p = Popen(shlex.split(showCommit), stdout=PIPE).communicate()
        commitStr = p[0].strip()
    except:
        versionStr = "tarball"

    headerTemplate = """
// Do not edit. Auto-generated by genversion.py
#define QSERV_SOURCE_VERSION "%s"
#define QSERV_SOURCE_COMMIT "%s"
"""
    # Guess whether input is a filename or a "scons target",
    # aka, list of Scons.File objects.
    targetFile = str(target[0])
    if str(target).endswith(".h"):
        targetFile = str(target)
    targetFile = open(str(targetFile), "w")  # coerce SCons.File to string
    targetFile.write(headerTemplate % (versionStr.strip(), commitStr.strip()))
    targetFile.close()
    return None

########################################################################
# How to use
########################################################################
#headerFile = env.Command(['versionheader.h'], None, buildVersionHeader)
